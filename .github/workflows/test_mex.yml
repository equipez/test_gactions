name: Test MATLAB MEX Fortran on macOS and Windows

on:
  # Trigger the workflow on push or pull request
  push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  #schedule:
  #    - cron: '0 19 * * *'
  # Trigger the workflow when it is manually triggered
  workflow_dispatch:

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18497/w_BaseKit_p_2022.1.2.154_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18529/w_HPCKit_p_2022.1.2.116_offline.exe
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18341/m_HPCKit_p_2022.1.0.86_offline.dmg
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler
  SAMPLES_TAG: 2022.1.0

jobs:
  test:
    name: Test MATLAB MEX on macOS and Windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: cache install Intel oneAPI on Windows
        if: matrix.os == 'windows-latest'
        id: cache-install-windows
        uses: actions/cache@v2
        with:
          path: C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_FORTRAN_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}
      - name: install Intel oneAPI on Windows
        if: matrix.os == 'windows-latest' && steps.cache-install-windows.outputs.cache-hit != 'true'
        run: scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_FORTRAN_COMPONENTS
      - name: exclude unused files from cache for Intel oneAPI on Windows
        if: matrix.os == 'windows-latest' && steps.cache-install-windows.outputs.cache-hit != 'true'
        shell: bash
        run: scripts/cache_exclude_windows.sh
      - name: Run intelvars_windows.bat
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cmd.exe "/K" '"scripts/intelvars_windows.bat" && powershell'
          echo "ONEAPI_ROOT=%ONEAPI_ROOT%"  >> $GITHUB_ENV
          echo "FORT_COMPILER21=%FORT_COMPILER21%" >> $GITHUB_ENV
          echo "$ONEAPI_ROOT"
          echo "$FORT_COMPILER21"

      - name: prepare for cache restore for Intel oneAPI on macOS
        if: matrix.os == 'macOS-latest'
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel
      - name: cache install Intel oneAPI on macOS
        if: matrix.os == 'macOS-latest'
        id: cache-install-macos
        uses: actions/cache@v2
        with:
          path: /opt/intel/oneapi
          key: install-${{ env.MACOS_HPCKIT_URL }}-${{ env.MACOS_FORTRAN_COMPONENTS }}
      - name: install Intel oneAPI on macOS
        if: matrix.os == 'macOS-latest' && steps.cache-install-macos.outputs.cache-hit != 'true'
        run: scripts/install_macos.sh $MACOS_HPCKIT_URL $MACOS_FORTRAN_COMPONENTS
      - name: Run setvars.sh and link ifort to /usr/local/bin
        if: matrix.os == 'macos-latest'
        run: |
            source /opt/intel/oneapi/setvars.sh
            sudo mkdir -p /usr/local/bin
            sudo ln -s $(which ifort) /usr/local/bin

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1.1.0

      - name: Run script
        if: matrix.os == 'windows-latest'
        uses: matlab-actions/run-command@v1
        with:
          command: |
              mex('-setup', '-v', 'FORTRAN'); mex('-v', fullfile(matlabroot, 'extern', 'examples', 'refbook', 'timestwo.F')); timestwo(1)
